plugins {
    id "com.android.application"
    id 'org.jetbrains.kotlin.android'
}

android {

    namespace "com.termux"
    compileSdk 34

    dependencies {
        implementation 'com.google.android.gms:play-services-wearable:18.1.0'
        implementation("androidx.wear.compose:compose-material:1.2.1")
        implementation 'androidx.wear.compose:compose-foundation:1.2.1'
        implementation "androidx.fragment:fragment:1.6.2"

        implementation project(":terminal-view")
        implementation project(":termux-shared")
    }
    defaultConfig {

        manifestPlaceholders
        manifestPlaceholders
        manifestPlaceholders
        manifestPlaceholders
        applicationId "com.termux"
        minSdk 28
        targetSdk 28
        versionCode 118
        versionName "0.118.0"
        resourceConfigurations += ['en', 'xhdpi']


        // Used by TermuxApplication class

        manifestPlaceholders.TERMUX_PACKAGE_NAME = "com.termux"
        manifestPlaceholders.TERMUX_APP_NAME = "Nyx"


        splits {
            abi {
                enable(true)
                reset()
                include 'x86_64', 'armeabi-v7a'
                universalApk false
            }
        }
        versionNameSuffix '.wear'
    }


    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            pseudoLocalesEnabled false
            crunchPngs true
        }

    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled false


        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging false
            excludes += ['lib/arm64-v8a/libcardioDecider.so', 'lib/arm64-v8a/libcardioRecognizer.so', 'lib/arm64-v8a/libcardioRecognizer_tegra2.so', 'lib/arm64-v8a/libopencv_core.so', 'lib/arm64-v8a/libopencv_imgproc.so', 'lib/armeabi/libcardioDecider.so', 'lib/armeabi-v7a/libcardioDecider.so', 'lib/armeabi-v7a/libcardioRecognizer.so', 'lib/armeabi-v7a/libcardioRecognizer_tegra2.so', 'lib/armeabi-v7a/libopencv_core.so', 'lib/armeabi-v7a/libopencv_imgproc.so', 'lib/mips/libcardioDecider.so', 'lib/x86/libcardioDecider.so', 'lib/x86/libcardioRecognizer.so', 'lib/x86/libcardioRecognizer_tegra2.so', 'lib/x86/libopencv_core.so', 'lib/x86/libopencv_imgproc.so', 'lib/x86_64/libcardioDecider.so', 'lib/x86_64/libcardioRecognizer.so', 'lib/x86_64/libcardioRecognizer_tegra2.so', 'lib/x86_64/libopencv_core.so', 'lib/x86_64/libopencv_imgproc.so']
        }
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}', 'META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt', 'META-INF/ECLIPSE_.SF', 'META-INF/ECLIPSE_.RSA', 'AndroidManifest.xml']
        }
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.4'
    }
    applicationVariants.configureEach { final variant ->
        variant.outputs.configureEach { final output ->

            final def abi = output.getFilter("ABI")
            outputFileName = new File("nyx_" + variant.buildType.name + "_" + (abi ? abi : "universal") + ".apk")

            
        }
    }

}

tasks.register('versionName') {
    doLast {
        print android.defaultConfig.versionName
    }
}

configurations.implementation {
    exclude(group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8')
    exclude(group: "androidx.compose.material", module: "material-ripple")
}
