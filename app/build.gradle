plugins {
    id "com.android.application"
    id 'org.jetbrains.kotlin.android'
}

ext {
    // The packageVariant defines the bootstrap variant that will be included in the app APK.
    // This must be supported by com.termux.shared.termux.TermuxBootstrap.PackageVariant or app will
    // crash at startup.
    // Bootstrap of a different variant must not be manually installed by the user after app installation
    // by replacing $PREFIX since app code is dependant on the variant used to build the APK.
    // Currently supported values are: [ "apt-android-7" "apt-android-5" ]
    packageVariant = "apt-android-7"
    // Default: "apt-android-7"
}

android {
    namespace "com.termux"
    compileSdk 34
    final def apkVersionTag = System.getenv("TERMUX_APK_VERSION_TAG") ?: ""
    final def splitAPKsForDebugBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_DEBUG_BUILDS") ?: "1"
    final def splitAPKsForReleaseBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_RELEASE_BUILDS") ?: "1"

    dependencies {
        implementation 'com.google.android.gms:play-services-wearable:18.1.0'
        implementation 'androidx.wear.compose:compose-material:1.2.1'
        implementation 'androidx.wear.compose:compose-foundation:1.2.1'
        implementation "androidx.appcompat:appcompat:1.6.1"

        implementation project(":terminal-view")
        implementation project(":termux-shared")
    }
    aaptOptions {
        cruncherEnabled true
    }
    defaultConfig {

        manifestPlaceholders
        manifestPlaceholders
        manifestPlaceholders
        applicationId "com.termux"
        minSdk 28
        //noinspection ExpiredTargetSdkVersion
        targetSdk 28
        versionCode 118
        versionName "0.118.0"
        resConfigs('en', 'xhdpi')


        // Used by TermuxApplication class

        manifestPlaceholders.TERMUX_PACKAGE_NAME = "com.termux"
        manifestPlaceholders.TERMUX_APP_NAME = "Termux"


        splits {
            abi {
                enable((gradle.startParameter.taskNames.any { it.contains("Debug") } && splitAPKsForDebugBuilds == "1") ||
                    (gradle.startParameter.taskNames.any { it.contains("Release") } && splitAPKsForReleaseBuilds == "1"))
                reset()
                include 'x86_64', 'armeabi-v7a'
                universalApk false
            }
        }
        vectorDrawables {
            useSupportLibrary true
        }
        versionNameSuffix '.wear'
    }


    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            pseudoLocalesEnabled false
            crunchPngs true
        }

    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled false


        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging false
            excludes += ['lib/arm64-v8a/libcardioDecider.so', 'lib/arm64-v8a/libcardioRecognizer.so', 'lib/arm64-v8a/libcardioRecognizer_tegra2.so', 'lib/arm64-v8a/libopencv_core.so', 'lib/arm64-v8a/libopencv_imgproc.so', 'lib/armeabi/libcardioDecider.so', 'lib/armeabi-v7a/libcardioDecider.so', 'lib/armeabi-v7a/libcardioRecognizer.so', 'lib/armeabi-v7a/libcardioRecognizer_tegra2.so', 'lib/armeabi-v7a/libopencv_core.so', 'lib/armeabi-v7a/libopencv_imgproc.so', 'lib/mips/libcardioDecider.so', 'lib/x86/libcardioDecider.so', 'lib/x86/libcardioRecognizer.so', 'lib/x86/libcardioRecognizer_tegra2.so', 'lib/x86/libopencv_core.so', 'lib/x86/libopencv_imgproc.so', 'lib/x86_64/libcardioDecider.so', 'lib/x86_64/libcardioRecognizer.so', 'lib/x86_64/libcardioRecognizer_tegra2.so', 'lib/x86_64/libopencv_core.so', 'lib/x86_64/libopencv_imgproc.so']
        }
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}', 'META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt', 'META-INF/ECLIPSE_.SF', 'META-INF/ECLIPSE_.RSA', 'AndroidManifest.xml']
        }
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.4'
    }
    applicationVariants.configureEach { final variant ->
        variant.outputs.configureEach { final output ->
            if (variant.buildType.name == "debug") {
                final def abi = output.getFilter("ABI")
                outputFileName = new File("termux-app_" + (apkVersionTag ? apkVersionTag : project.ext.packageVariant + "-" + "debug") + "_" + (abi ? abi : "universal") + ".apk")
            } else if (variant.buildType.name == "release") {
                final def abi = output.getFilter("ABI")
                outputFileName = new File("termux-app_" + (apkVersionTag ? apkVersionTag : project.ext.packageVariant + "-" + "release") + "_" + (abi ? abi : "universal") + ".apk")
            }
        }
    }

}

tasks.register('versionName') {
    doLast {
        print android.defaultConfig.versionName
    }
}

configurations.implementation {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}
